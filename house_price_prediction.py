# -*- coding: utf-8 -*-
"""House Price Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CJLxZCKtsv9YO7MY4swO8OQWPkFs-EZf
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn.datasets
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn import metrics

"""Importing the boston house price dataset from sklearn"""

house_price_dataset = sklearn.datasets.load_boston()

print(house_price_dataset)

# loading the dataset to pandas dataframe
house_price_df = pd.DataFrame(data=house_price_dataset.data, columns=house_price_dataset.feature_names)

# add the target column to dataframe
house_price_df['PRICE'] = house_price_dataset.target

house_price_df.head()

house_price_df.shape

# check for missing value counts for each column
house_price_df.isnull().sum()

house_price_df.describe()

house_price_df.corr()

correlation = house_price_df.corr()

#plotting a heatmap to understand the correlation between differnet columns

plt.figure(figsize=(10,10))
sns.heatmap(correlation, cbar=True, square=True, fmt='.1f', annot=True, annot_kws={'size':8}, cmap='Blues')

X = house_price_df.drop(['PRICE'], axis=1)
Y = house_price_df['PRICE']

print(X,Y)

"""Splitting the data into training and test data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

print(Y.shape, Y_train.shape, Y_test.shape)

"""Model Training"""

model = XGBRegressor()

# Training the model with training data
model.fit(X_train, Y_train)

# Evaluation - In case of regression, we cant find accuracy scores as it is not categorical. So we use R sqaured error or Mean absolute error etc....

training_data_prediction = model.predict(X_train)

print(training_data_prediction)

# R squared error
score_1 = metrics.r2_score(Y_train, training_data_prediction)

# Mean Absolute Error
score_2 = metrics.mean_absolute_error(Y_train, training_data_prediction)

print('R-squared error: ',score_1) # Lesser the value more accurate the model. 
print('Mean Absolute Error: ', score_2)

"""Visualizing the actual prices and predicted prices"""

plt.scatter(Y_train, training_data_prediction)
plt.xlabel('Actual Price')
plt.ylabel('Predicted Price')
plt.title('Actual Price VS Predicted Price')
plt.show()

"""As the graph is pretty close that means the model is predicting correctly.

Predicting the test data
"""

test_data_prediction = model.predict(X_test)

score_3 = metrics.r2_score(Y_test, test_data_prediction)
score_4 = metrics.mean_absolute_error(Y_test, test_data_prediction)

print('R-squared error: ',score_3) # Lesser the value more accurate the model. 
print('Mean Absolute Error: ', score_4)

plt.scatter(Y_test, test_data_prediction)
plt.xlabel('Actual Price')
plt.ylabel('Predicted Price')
plt.title('Actual Price VS Predicted Price')
plt.show()

